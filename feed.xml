<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-09-29T17:12:32+08:00</updated><id>/feed.xml</id><title type="html">Talon’s blog</title><subtitle>未经省察的人生是不值得过的。</subtitle><entry><title type="html">I2C EEPROM read/write</title><link href="/jekyll/update/2025/09/28/i2c-eeprom-access.html" rel="alternate" type="text/html" title="I2C EEPROM read/write" /><published>2025-09-28T16:51:05+08:00</published><updated>2025-09-28T16:51:05+08:00</updated><id>/jekyll/update/2025/09/28/i2c-eeprom-access</id><content type="html" xml:base="/jekyll/update/2025/09/28/i2c-eeprom-access.html"><![CDATA[<p>I2C 的随机读操作是需要注意的地方，在地址发送完成后发与不发 stop 会有不一样的行为。</p>

<h3 id="写">写</h3>
<p>写完地址后，继续发送写 byte, 直到最后的 byte 完成，接着发送一个 stop。</p>
<h3 id="顺序读">顺序读</h3>
<p>这样的读不需要设定地址，start 后发设备读命令，接着读取数据，形式是 start, stop 成对。</p>
<h3 id="随机读">随机读</h3>
<p>写完地址后，不发送 stop, 接着发送 start 和设备读命令，然后下一个字节是读数据。读的时候是主机发送 ACK, 表示读最后一个字节时，发送 NAK, 并发送 stop。
不是 start, stop 成对，而是 start, start, stop。</p>
<h3 id="随机读时-如果在地址之后发送-stop">随机读时： 如果在地址之后发送 stop</h3>
<p>如果在地址发完后发 stop, 数据形式为 start, stop, start, stop。第一个 start, stop 是不发数据的写过程。在我使用的仿真模型里面，会被当做是写命令，这就会有写数据的时间等待。后续的顺序读命令发出时，如果 Twr 时间未过，仿真模型会忽略命令，从而不回复 ACK，导致和软件预期不同。</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[I2C 的随机读操作是需要注意的地方，在地址发送完成后发与不发 stop 会有不一样的行为。]]></summary></entry></feed>